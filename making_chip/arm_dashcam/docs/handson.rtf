{\rtf1\ansi\deff0\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\fnil\fprq0\fcharset128 OpenSymbol{\*\falt Arial Unicode MS};}{\f4\fmodern\fprq1\fcharset0 Courier New;}{\f5\fnil\fprq2\fcharset0 Microsoft YaHei;}{\f6\fnil\fprq2\fcharset0 SimSun;}{\f7\fmodern\fprq1\fcharset0 NSimSun;}{\f8\fnil\fprq2\fcharset0 Arial;}{\f9\fswiss\fprq0\fcharset128 Arial;}}
{\colortbl;\red0\green0\blue0;\red128\green128\blue128;}
{\stylesheet{\s0\snext0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af6\langfe2052\dbch\af8\afs24\lang1081\loch\f0\fs24\lang1033 Default;}
{\s3\sbasedon19\snext20\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28 Heading 3;}
{\s4\sbasedon19\snext20\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24 Heading 4;}
{\s5\sbasedon19\snext20\ilvl4\outlinelevel4\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs20\ab\loch\f0\fs20 Heading 5;}
{\*\cs15\snext15\b\ab Strong Emphasis;}
{\*\cs16\snext16 Numbering Symbols;}
{\*\cs17\snext17\hich\af3\dbch\af3\loch\f3 Bullets;}
{\*\cs18\snext18\hich\af7\dbch\af4\loch\f4 Source Text;}
{\s19\sbasedon0\snext20\sb240\sa120\keepn\hich\af5\dbch\af8\afs28\loch\f2\fs28 Heading;}
{\s20\sbasedon0\snext20\sb0\sa120 Text body;}
{\s21\sbasedon20\snext21\sb0\sa120\dbch\af9 List;}
{\s22\sbasedon0\snext22\sb120\sa120\noline\i\dbch\af9\afs24\ai\fs24 Caption;}
{\s23\sbasedon0\snext23\noline\dbch\af9 Index;}
{\s24\sbasedon0\snext20\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12 Horizontal Line;}
{\s25\sbasedon0\snext25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20 Preformatted Text;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li1414}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2121}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2828}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li3535}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4242}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4949}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li5656}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li6363}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-283\li1414}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-283\li2121}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-283\li2828}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-283\li3535}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-283\li4242}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-283\li4949}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-283\li5656}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-283\li6363}\listid2}
{\list\listtemplateid3
{\listlevel\levelnfc0\leveljc0\levelstartat2\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-283\li1414}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-283\li2121}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-283\li2828}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-283\li3535}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-283\li4242}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-283\li4949}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-283\li5656}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-283\li6363}\listid3}
{\list\listtemplateid4
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li707}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li1414}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2121}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2828}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li3535}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4242}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4949}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li5656}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li6363}\listid4}
{\list\listtemplateid5
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li707}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li1414}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2121}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2828}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li3535}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4242}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4949}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li5656}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li6363}\listid5}
{\list\listtemplateid6
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li707}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li1414}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2121}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2828}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li3535}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4242}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4949}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li5656}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li6363}\listid6}
{\list\listtemplateid7
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-283\li1414}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-283\li2121}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-283\li2828}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-283\li3535}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-283\li4242}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-283\li4949}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-283\li5656}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-283\li6363}\listid7}
{\list\listtemplateid8
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li1414}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2121}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2828}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li3535}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4242}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4949}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li5656}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li6363}\listid8}
{\list\listtemplateid9
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-283\li1414}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-283\li2121}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-283\li2828}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-283\li3535}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-283\li4242}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-283\li4949}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-283\li5656}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-283\li6363}\listid9}
{\list\listtemplateid10
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li707}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li1414}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2121}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2828}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li3535}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4242}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4949}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li5656}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li6363}\listid10}
{\list\listtemplateid11
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li707}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li1414}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2121}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2828}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li3535}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4242}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4949}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li5656}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li6363}\listid11}
{\list\listtemplateid12
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li1414}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2121}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li2828}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li3535}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4242}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li4949}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li5656}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f3\dbch\af3\fi-283\li6363}\listid12}
{\list\listtemplateid13
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-283\li1414}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-283\li2121}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-283\li2828}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-283\li3535}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-283\li4242}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-283\li4949}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-283\li5656}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-283\li6363}\listid13}
{\list\listtemplateid14
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-283\li1414}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-283\li2121}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-283\li2828}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-283\li3535}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-283\li4242}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-283\li4949}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-283\li5656}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-283\li6363}\listid14}
{\list\listtemplateid15
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-432\li432}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-576\li576}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-864\li864}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1008\li1008}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1152\li1152}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1296\li1296}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1440\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1584\li1584}\listid15}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment OpenOffice}{\vern41110}}\deftab709

{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default;}}
\formshade\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pgndec\pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28\sb240\sa120{\*\cs15\b\ab\rtlch \ltrch\loch
Hands-On Documentation: Using FuseSoC to Integrate IPs to the ArmDashCam SoC}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This documentation provides a step-by-step guide on how to use }{\*\cs15\b\ab\rtlch \ltrch\loch
FuseSoC}{\rtlch \ltrch\loch
 to integrate the IPs into the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 design. FuseSoC is a package manager and build system for hardware designs that supports integration of IP cores into a project. The integration process will involve setting up the environment, creating a FuseSoC core for each IP, and finally, assembling them into the complete }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam}{\rtlch \ltrch\loch
 SoC.}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
1. Prerequisites}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Before starting, ensure you have the following tools installed:}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  1.\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
FuseSoC}{\rtlch \ltrch\loch
: A package manager and build system for hardware designs.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl1\ls1 \li0\ri0\lin0\rin0\fi-283\tx1414\li1414\ri0\lin1414\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
Installation: }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
pip install fusesoc}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  2.\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
Verilog and VHDL tools}{\rtlch \ltrch\loch
: Required for synthesizing and simulating the designs. Ensure tools like Xilinx Vivado, Intel Quartus, or other Verilog synthesis tools are available.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  3.\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
Git}{\rtlch \ltrch\loch
: Required for cloning repositories and managing projects.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  4.\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
Python}{\rtlch \ltrch\loch
: Used by FuseSoC for project management.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  5.\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
GNU Make}{\rtlch \ltrch\loch
: Required for running build scripts.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  6.\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\*\cs15\b\ab\rtlch \ltrch\loch
Verilog/HDL files for the ArmDashCam SoC}{\rtlch \ltrch\loch
 and IP cores.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
2. Setting Up the FuseSoC Environment}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 1: Install FuseSoC}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
First, you need to install }{\*\cs15\b\ab\rtlch \ltrch\loch
FuseSoC}{\rtlch \ltrch\loch
:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
pip install fusesoc}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 2: Set Up FuseSoC Repositories}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
To get started, you need to add FuseSoC repositories containing the IP cores. This includes both the pre-configured IPs as well as the ones you may create or import.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  1.\tab}\ilvl0\ls2 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\*\cs15\b\ab\rtlch \ltrch\loch
Add FuseSoC Repositories}{\rtlch \ltrch\loch
:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
fusesoc --cores-root=/path/to/cores init}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  2.\tab}\ilvl0\ls3 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\*\cs15\b\ab\rtlch \ltrch\loch
Download the ArmDashCam IPs}{\rtlch \ltrch\loch
: Download or create a FuseSoC core for each IP component used in the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 (e.g., Clock, Reset, NoC, etc.).}
\par \pard\plain \s20\sb0\sa120\li707\ri0\lin707\rin0\fi0{\rtlch \ltrch\loch
Example: You might clone a repository for an AXI interface or a clock/reset module:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
git clone https://github.com/user/clk_rst_ip.git /path/to/cores/clk_rst_ip}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
git clone https://github.com/user/noc_axi.git /path/to/cores/noc_axi}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
3. Creating FuseSoC Core for ArmDashCam}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Each IP will be encapsulated in its own FuseSoC core. Let's walk through how to create a FuseSoC core for a simple IP (for example, the }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 module).}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 1: Define FuseSoC Core for NoC IP}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In the directory for the NoC IP (}{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
/path/to/cores/noc_axi}{\rtlch \ltrch\loch
), create a }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
core.yml}{\rtlch \ltrch\loch
 file that defines the NoC module and its configuration. Here's an example:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
yaml}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
name: noc_axi}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
files:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- noc_axi.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- noc_axi_tb.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- parameters.txt}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
library:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- name: noc_axi}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
version: v1.0}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
path: /path/to/cores/noc_axi}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
dependencies:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- axi: v1.0}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls4 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
name}{\rtlch \ltrch\loch
: Defines the name of the core (NoC).}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls4 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
files}{\rtlch \ltrch\loch
: Lists the Verilog files that make up the NoC design (e.g., }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
noc_axi.v}{\rtlch \ltrch\loch
).}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls4 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\*\cs15\b\ab\rtlch \ltrch\loch
dependencies}{\rtlch \ltrch\loch
: Defines any dependent cores (e.g., AXI).}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 2: Define FuseSoC Core for Clock and Reset}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Similarly, define the }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock and Reset}{\rtlch \ltrch\loch
 IP in its directory:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
yaml}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
name: clk_rst_ip}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
files:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- clk_rst_ip.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- clk_rst_tb.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- parameters.txt}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
library:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- name: clk_rst_ip}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
version: v1.0}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
path: /path/to/cores/clk_rst_ip}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
dependencies: []}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
core.yml}{\rtlch \ltrch\loch
 file describes the }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock and Reset}{\rtlch \ltrch\loch
 IP. It includes the Verilog files (}{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
clk_rst_ip.v}{\rtlch \ltrch\loch
) and defines the core's name and version.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 3: Integrate ArmDashCam SoC Core}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Finally, create the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 core. This core will integrate all the individual IPs together into a system.}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Create a }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
core.yml}{\rtlch \ltrch\loch
 for the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 in its directory:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
yaml}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
name: armdashcam_soc}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
files:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- armdashcam_soc.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- armdashcam_tb.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- system_params.txt}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
dependencies:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- noc_axi: v1.0}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- clk_rst_ip: v1.0}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- memory_ip: v1.0  # Include other IP cores if necessary}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls5 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
The }{\*\cs15\b\ab\rtlch \ltrch\loch
dependencies}{\rtlch \ltrch\loch
 section now includes the previously created }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 and }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock/Reset}{\rtlch \ltrch\loch
 IPs.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls5 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\rtlch \ltrch\loch
The }{\*\cs15\b\ab\rtlch \ltrch\loch
files}{\rtlch \ltrch\loch
 section contains the top-level Verilog file (}{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_soc.v}{\rtlch \ltrch\loch
) that will instantiate the cores.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
4. Wiring Up the Components}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 1: Instantiating the NoC and Clock/Reset IPs in ArmDashCam}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In the }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_soc.v}{\rtlch \ltrch\loch
 file, instantiate the }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 and }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock/Reset}{\rtlch \ltrch\loch
 IPs:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
verilog}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
module armdashcam_soc (}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
input wire clk_in,}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
input wire reset_in,}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
output wire sys_clk,}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
output wire sys_reset_n}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
);}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Clock and Reset Instantiation}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire clk;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire reset_n;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
clk_rst_ip clk_rst_inst (}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.clk_in(clk_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.reset_in(reset_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.sys_clk(clk),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.sys_reset_n(reset_n)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
);}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// NoC Instantiation}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire [31:0] axi_m0_awaddr;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire axi_m0_awvalid;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire [31:0] axi_m0_wdata;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire axi_m0_wvalid;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire axi_m0_bready;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
noc_axi noc_inst (}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.clk(clk),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.reset_n(reset_n),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_awaddr(axi_m0_awaddr),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_awvalid(axi_m0_awvalid),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_wdata(axi_m0_wdata),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_wvalid(axi_m0_wvalid),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_bready(axi_m0_bready)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
);}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Outputs}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
assign sys_clk = clk;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
assign sys_reset_n = reset_n;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
endmodule}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls6 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
The }{\*\cs15\b\ab\rtlch \ltrch\loch
clk_rst_ip}{\rtlch \ltrch\loch
 is instantiated for the clock and reset functionality.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls6 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\rtlch \ltrch\loch
The }{\*\cs15\b\ab\rtlch \ltrch\loch
noc_axi}{\rtlch \ltrch\loch
 is instantiated to provide the AXI communication between the system components.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 2: Simulating the Design}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
You can simulate the SoC design using Verilog testbenches (}{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_tb.v}{\rtlch \ltrch\loch
). This file tests the top-level integration of the IP cores.}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_tb.v}{\rtlch \ltrch\loch
:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
verilog}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
module armdashcam_tb;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
reg clk_in;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
reg reset_in;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire sys_clk;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire sys_reset_n;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Instantiate the SoC}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_soc uut (}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.clk_in(clk_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.reset_in(reset_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.sys_clk(sys_clk),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.sys_reset_n(sys_reset_n)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
);}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
initial begin}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Initialize signals}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
clk_in = 0;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
reset_in = 1;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Apply reset}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
#10 reset_in = 0;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
#10 reset_in = 1;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Stimulate clock}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
forever #5 clk_in = ~clk_in;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
end}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
endmodule}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Run the simulation:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
fusesoc run --target=sim --tool=iverilog armdashcam_soc}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
5. Building the Design}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Once the FuseSoC core is set up, use the following command to compile and build the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
fusesoc build armdashcam_soc}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This command will:}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  1.\tab}\ilvl0\ls7 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
Download the necessary IP cores.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  2.\tab}\ilvl0\ls7 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
Run synthesis and simulation steps as defined in the }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
core.yml}{\rtlch \ltrch\loch
 files.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  3.\tab}\ilvl0\ls7 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\rtlch \ltrch\loch
Generate output files such as synthesized Verilog files and simulation outputs.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
6. Packaging the Design}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
If you want to share or reuse the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 design, you can package the entire core as a FuseSoC-compatible package:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
fusesoc package --output /path/to/output armdashcam_soc}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This will create a package that can be reused across different systems.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
7. Conclusion}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This guide has shown how to use }{\*\cs15\b\ab\rtlch \ltrch\loch
FuseSoC}{\rtlch \ltrch\loch
 to integrate individual IPs into the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
. By following the steps to create cores for each IP, wire them up in the SoC, simulate, and build the design, you can effectively manage and integrate complex hardware components. FuseSoC provides a clean, modular approach to managing hardware projects and IPs, streamlining the process of SoC design and verification.}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
Hands-On Documentation: Using Edalize to Integrate IPs into the ArmDashCam SoC}
\par \pard\plain \s20\sb0\sa120{\*\cs15\b\ab\rtlch \ltrch\loch
Edalize}{\rtlch \ltrch\loch
 is a versatile and flexible tool for generating and managing hardware design flows for HDL-based projects. It provides integration with different EDA tools like Yosys, Vivado, and others. Edalize simplifies the process of integrating multiple IPs into a System on Chip (SoC), enabling you to manage your project setup, generate the necessary files for synthesis, and run simulations.}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In this hands-on guide, we will walk through the process of using }{\*\cs15\b\ab\rtlch \ltrch\loch
Edalize}{\rtlch \ltrch\loch
 to integrate the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 IPs (such as NoC, Clock/Reset, and others) into a complete SoC project.}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
1. Prerequisites}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
To follow along, make sure you have the following installed:}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  1.\tab}\ilvl0\ls8 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
Edalize}{\rtlch \ltrch\loch
: Used to manage the integration of IP cores and generate necessary files for synthesis and simulation.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl1\ls8 \li0\ri0\lin0\rin0\fi-283\tx1414\li1414\ri0\lin1414\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
Installation: }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
pip install edalize}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  2.\tab}\ilvl0\ls8 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
HDL tools}{\rtlch \ltrch\loch
: Ensure you have tools like Yosys, Vivado, or Xilinx tools installed for synthesis and simulation.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  3.\tab}\ilvl0\ls8 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
Python}{\rtlch \ltrch\loch
: Edalize uses Python scripts to manage the project flow.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  4.\tab}\ilvl0\ls8 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
Git}{\rtlch \ltrch\loch
: For version control and cloning repositories.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  5.\tab}\ilvl0\ls8 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\*\cs15\b\ab\rtlch \ltrch\loch
Verilog files}{\rtlch \ltrch\loch
: You should have your IP cores (NoC, Clock/Reset, and others) ready in Verilog.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
2. Setting Up the Edalize Environment}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 1: Install Edalize}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
First, you need to install }{\*\cs15\b\ab\rtlch \ltrch\loch
Edalize}{\rtlch \ltrch\loch
 using Python's package manager:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
pip install edalize}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 2: Create the Project Directory}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Create a directory for your }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 project:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
mkdir armdashcam}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
cd armdashcam}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Within this project directory, we will create all necessary configuration files and structure.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 3: Initialize the Project Structure}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Use }{\*\cs15\b\ab\rtlch \ltrch\loch
Edalize}{\rtlch \ltrch\loch
 to initialize your project and set up the necessary directories:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
edalize init --hdl verilog --tool yosys}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This will create a basic directory structure with configuration files and directories for storing Verilog files, synthesis configurations, and more. We will add our IPs and SoC files here.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
3. Integrating IP Cores with Edalize}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 1: Add the IPs}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Each IP used in the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 needs to be added to the }{\*\cs15\b\ab\rtlch \ltrch\loch
Edalize}{\rtlch \ltrch\loch
 project. You need to:}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  1.\tab}\ilvl0\ls9 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
Create a directory for each IP core.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  2.\tab}\ilvl0\ls9 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\rtlch \ltrch\loch
Create a }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
top.yml}{\rtlch \ltrch\loch
 configuration file for each IP.}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Here\'92s an example of how you might set this up:}
\par \pard\plain \s5\ilvl4\outlinelevel4\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs20\ab\loch\f0\fs20{\*\cs15\b\ab\rtlch \ltrch\loch
NoC IP Configuration (}{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
noc_axi.yml}{\*\cs15\b\ab\rtlch \ltrch\loch
)}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Create a directory }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
noc_axi}{\rtlch \ltrch\loch
 inside the project folder and add the IP core files (e.g., }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
noc_axi.v}{\rtlch \ltrch\loch
) there.}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
mkdir noc_axi}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
noc_axi.yml}{\rtlch \ltrch\loch
, add the following configuration:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
yaml}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
name: noc_axi}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
files:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- noc_axi.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- parameters.txt}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
toolchain:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
name: yosys}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
options:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- -rtl}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- -noopt}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls10 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
files}{\rtlch \ltrch\loch
: This section contains all Verilog files for the NoC module.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls10 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\*\cs15\b\ab\rtlch \ltrch\loch
toolchain}{\rtlch \ltrch\loch
: Specifies that }{\*\cs15\b\ab\rtlch \ltrch\loch
Yosys}{\rtlch \ltrch\loch
 will be used for synthesis.}
\par \pard\plain \s5\ilvl4\outlinelevel4\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs20\ab\loch\f0\fs20{\*\cs15\b\ab\rtlch \ltrch\loch
Clock/Reset IP Configuration (}{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
clk_rst_ip.yml}{\*\cs15\b\ab\rtlch \ltrch\loch
)}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Similarly, create a }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
clk_rst_ip.yml}{\rtlch \ltrch\loch
 file for the }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock and Reset}{\rtlch \ltrch\loch
 module:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
yaml}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
name: clk_rst_ip}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
files:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- clk_rst_ip.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- clk_rst_tb.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
toolchain:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
name: yosys}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
options:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- -rtl}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- -noopt}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 2: Configure the ArmDashCam SoC}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 directory, create a }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
top.yml}{\rtlch \ltrch\loch
 configuration file that will integrate the IPs. For example:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
yaml}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
name: armdashcam_soc}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
files:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- armdashcam_soc.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- armdashcam_tb.v}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- system_params.txt}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
dependencies:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- noc_axi: v1.0}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
  }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
- clk_rst_ip: v1.0}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls11 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
dependencies}{\rtlch \ltrch\loch
: Lists the dependencies for the SoC, which are the }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 and }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock/Reset}{\rtlch \ltrch\loch
 IPs.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl0\ls11 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\*\cs15\b\ab\rtlch \ltrch\loch
files}{\rtlch \ltrch\loch
: Contains the top-level Verilog files for the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 3: Create the Top-Level SoC File (}{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_soc.v}{\*\cs15\b\ab\rtlch \ltrch\loch
)}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_soc.v}{\rtlch \ltrch\loch
, instantiate the NoC and Clock/Reset IPs:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
verilog}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
module armdashcam_soc (}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
input wire clk_in,}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
input wire reset_in,}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
output wire sys_clk,}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
output wire sys_reset_n}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
);}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Clock and Reset Instantiation}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire clk;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire reset_n;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
clk_rst_ip clk_rst_inst (}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.clk_in(clk_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.reset_in(reset_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.sys_clk(clk),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.sys_reset_n(reset_n)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
);}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// NoC Instantiation}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire [31:0] axi_m0_awaddr;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire axi_m0_awvalid;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire [31:0] axi_m0_wdata;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire axi_m0_wvalid;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire axi_m0_bready;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
noc_axi noc_inst (}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.clk(clk),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.reset_n(reset_n),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_awaddr(axi_m0_awaddr),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_awvalid(axi_m0_awvalid),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_wdata(axi_m0_wdata),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_wvalid(axi_m0_wvalid),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.axi_m0_bready(axi_m0_bready)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
);}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Outputs}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
assign sys_clk = clk;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
assign sys_reset_n = reset_n;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
endmodule}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This file wires up the }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock/Reset}{\rtlch \ltrch\loch
 and }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 cores to the top-level SoC.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 4: Add the Simulation Testbench (}{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_tb.v}{\*\cs15\b\ab\rtlch \ltrch\loch
)}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Create a testbench }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_tb.v}{\rtlch \ltrch\loch
 to simulate the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
verilog}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
module armdashcam_tb;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
reg clk_in;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
reg reset_in;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire sys_clk;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
wire sys_reset_n;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Instantiate the SoC}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
armdashcam_soc uut (}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.clk_in(clk_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.reset_in(reset_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.sys_clk(sys_clk),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
.sys_reset_n(sys_reset_n)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
);}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
initial begin}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Initialize signals}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
clk_in = 0;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
reset_in = 1;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Apply reset}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
#10 reset_in = 0;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
#10 reset_in = 1;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
// Stimulate clock}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
forever #5 clk_in = ~clk_in;}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
end}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
endmodule}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
4. Building and Running the Design}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 1: Use Edalize to Run the Build Process}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Now that the configuration files are set up, run the following command to synthesize the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
edalize --tool yosys --target synth armdashcam_soc}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This will trigger the synthesis process using Yosys and generate the output files, including netlists, for further processing in your toolchain.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 2: Run Simulation}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
To simulate the design, use the following command:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
edalize --tool icarus --target sim armdashcam_soc}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This will run the simulation with the }{\*\cs15\b\ab\rtlch \ltrch\loch
Icarus Verilog}{\rtlch \ltrch\loch
 simulator, and you should see the simulation results in the terminal or any waveform viewer.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
5. Packaging and Reusing the Design}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
You can also package the design for reuse or sharing using Edalize's packaging mechanism:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
bash}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
CopyEdit}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283\ltrpar{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
edalize package --output /path/to/output armdashcam_soc}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This will create a packaged version of your }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 that can be used in other projects or for further development.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
6. Conclusion}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In this hands-on guide, we walked through the process of using }{\*\cs15\b\ab\rtlch \ltrch\loch
Edalize}{\rtlch \ltrch\loch
 to integrate various IPs (such as NoC, Clock/Reset, etc.) into the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
. We set up the project directory, configured the IP cores, instantiated them in the SoC, and used Edalize to synthesize and simulate the design. With Edalize, you can easily manage complex hardware projects, automate toolchain flows, and ensure smooth integration of various components into your SoC.}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
Hands-On Documentation: Using Amaranth to Integrate IPs into the ArmDashCam SoC}
\par \pard\plain \s20\sb0\sa120{\*\cs15\b\ab\rtlch \ltrch\loch
Amaranth}{\rtlch \ltrch\loch
 is a Python-based hardware description language (HDL) that facilitates hardware design and simulation. It allows you to write concise and expressive HDL code using Python\'92s syntax, making it a versatile tool for hardware engineers. In this guide, we'll demonstrate how to use }{\*\cs15\b\ab\rtlch \ltrch\loch
Amaranth}{\rtlch \ltrch\loch
 to integrate multiple IPs (such as NoC, Clock/Reset, and others) into the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 design.}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
1. Prerequisites}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Before proceeding with the tutorial, make sure you have the following installed:}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  1.\tab}\ilvl0\ls12 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
Amaranth}{\rtlch \ltrch\loch
: The Python-based HDL for designing hardware. }
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain \hich\af3\dbch\af3\loch\f3 \'95\tab}\ilvl1\ls12 \li0\ri0\lin0\rin0\fi-283\tx1414\li1414\ri0\lin1414\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
Installation: }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
pip install amaranth}{\rtlch \ltrch\loch
 }
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  2.\tab}\ilvl0\ls12 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
Python}{\rtlch \ltrch\loch
: Amaranth leverages Python for design and simulation. }
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  3.\tab}\ilvl0\ls12 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\*\cs15\b\ab\rtlch \ltrch\loch
Verilog files}{\rtlch \ltrch\loch
: You should already have the IP cores (such as }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
, }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock/Reset}{\rtlch \ltrch\loch
) written in Verilog or VHDL. }
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  4.\tab}\ilvl0\ls12 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\*\cs15\b\ab\rtlch \ltrch\loch
Simulators}{\rtlch \ltrch\loch
: For simulation, you can use }{\*\cs15\b\ab\rtlch \ltrch\loch
nMigen}{\rtlch \ltrch\loch
, }{\*\cs15\b\ab\rtlch \ltrch\loch
Verilator}{\rtlch \ltrch\loch
, or other compatible simulation tools. }
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
2. Setting Up the Amaranth Environment}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 1: Install Amaranth}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
To install }{\*\cs15\b\ab\rtlch \ltrch\loch
Amaranth}{\rtlch \ltrch\loch
, use the following command:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
pip install amaranth}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This installs the Amaranth Python library that can be used for hardware design, synthesis, and simulation.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 2: Create a Project Directory}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Create a new directory for your }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 project and navigate into it:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
mkdir armdashcam}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
cd armdashcam}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 3: Set Up Amaranth for Hardware Design}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Amaranth designs are Python classes that represent hardware components, so we\'92ll begin by setting up the base files.}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  1.\tab}\ilvl0\ls13 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\rtlch \ltrch\loch
Create the necessary directories:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\li707\ri0\lin707\rin0\fi0{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
mkdir src}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\li707\ri0\lin707\rin0\fi0\sb0\sa283{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
mkdir sim}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  2.\tab}\ilvl0\ls13 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\rtlch \ltrch\loch
In }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
src}{\rtlch \ltrch\loch
, we will place our design files. In }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
sim}{\rtlch \ltrch\loch
, we will place the simulation files, such as testbenches.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
3. Integrating IP Cores into ArmDashCam with Amaranth}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 1: Define the NoC IP in Amaranth}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
To integrate an existing Verilog }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 IP into Amaranth, we will first define a Python class that represents the NoC.}
\par \pard\plain \s5\ilvl4\outlinelevel4\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs20\ab\loch\f0\fs20{\*\cs15\b\ab\rtlch \ltrch\loch
NoC IP Class Example (}{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
noc_axi.py}{\*\cs15\b\ab\rtlch \ltrch\loch
)}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
src/noc_axi.py}{\rtlch \ltrch\loch
, define the NoC IP core as an Amaranth module:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from amaranth import *}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
class NoC(Elaboratable):}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
def __init__(self):}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Define inputs and outputs}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.clk = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.reset_n = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.axi_m0_awaddr = Signal(32)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.axi_m0_awvalid = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.axi_m0_wdata = Signal(32)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.axi_m0_wvalid = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.axi_m0_bready = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
def elaborate(self, platform):}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
m = Module()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Example: Simple AXI interface logic}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# In a real design, this would interact with an AXI slave or master}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Instantiate the AXI interface and logic here}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
return m}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This class represents a simple }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 IP with AXI interface signals. You can modify the logic in the }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
elaborate}{\rtlch \ltrch\loch
 method to include the specific functionality of the }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 IP.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 2: Define the Clock and Reset IP in Amaranth}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Similarly, define a }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock and Reset}{\rtlch \ltrch\loch
 module. In }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
src/clk_rst.py}{\rtlch \ltrch\loch
:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from amaranth import *}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
class ClockReset(Elaboratable):}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
def __init__(self):}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Define inputs and outputs for clock and reset}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.clk_in = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.reset_in = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.sys_clk = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.sys_reset_n = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
def elaborate(self, platform):}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
m = Module()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Clock and Reset logic}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
m.d.sync += [}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.sys_clk.eq(self.clk_in),  # Example: Pass through input clock}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.sys_reset_n.eq(~self.reset_in)  # Active low reset}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
]}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
return m}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This simple module connects an input clock to an output clock and inverts the reset signal for active-low behavior.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 3: Create the ArmDashCam SoC Top-Level Module}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Now, create the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 by combining the }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 and }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock/Reset}{\rtlch \ltrch\loch
 IPs. In }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
src/armdashcam_soc.py}{\rtlch \ltrch\loch
:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from amaranth import *}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from noc_axi import NoC}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from clk_rst import ClockReset}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
class ArmDashCamSoC(Elaboratable):}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
def __init__(self):}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Instantiate IP cores}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.noc = NoC()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.clk_rst = ClockReset()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Define inputs and outputs}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.clk_in = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.reset_in = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.sys_clk = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.sys_reset_n = Signal()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
def elaborate(self, platform):}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
m = Module()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Instantiate the Clock and Reset IP}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
m.submodules.clk_rst = self.clk_rst}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
m.d.comb += [}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.clk_rst.clk_in.eq(self.clk_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.clk_rst.reset_in.eq(self.reset_in),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.sys_clk.eq(self.clk_rst.sys_clk),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.sys_reset_n.eq(self.clk_rst.sys_reset_n)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
]}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Instantiate the NoC IP}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
m.submodules.noc = self.noc}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
m.d.comb += [}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.noc.clk.eq(self.sys_clk),}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
self.noc.reset_n.eq(self.sys_reset_n)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
]}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
return m}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This top-level module integrates the }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 and }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock/Reset}{\rtlch \ltrch\loch
 modules into the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
. The }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
elaborate}{\rtlch \ltrch\loch
 method connects the clocks and reset signals between the modules.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
4. Simulation of the Design}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 1: Create a Testbench for ArmDashCam SoC}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Now that we have the top-level }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 defined, let\'92s create a testbench to simulate the design. In }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
sim/armdashcam_tb.py}{\rtlch \ltrch\loch
:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from amaranth import *}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from amaranth.sim import Simulator}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from armdashcam_soc import ArmDashCamSoC}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
def testbench():}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Create an instance of the ArmDashCam SoC}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
dut = ArmDashCamSoC()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Create the simulator instance}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
sim = Simulator(dut)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Define the clock process}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
def clk_gen():}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
while True:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield dut.clk_in.eq(1)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield dut.clk_in.eq(0)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
            }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Define the reset process}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
def reset_gen():}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield dut.reset_in.eq(1)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield dut.reset_in.eq(0)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield dut.reset_in.eq(1)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
        }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
yield}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Add the clock and reset processes to the simulator}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
sim.add_process(clk_gen)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
sim.add_process(reset_gen)}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Run the simulation for a certain number of cycles}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
sim.add_process(lambda: [print("Simulating..."), yield from dut.done])}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
sim.run()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
if __name__ == "__main__":}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch
    }{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
testbench()}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This testbench generates the clock and reset signals and runs the simulation.}
\par \pard\plain \s4\ilvl3\outlinelevel3\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs24\ab\loch\f0\fs24{\*\cs15\b\ab\rtlch \ltrch\loch
Step 2: Running the Simulation}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Run the simulation using the following command:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
python sim/armdashcam_tb.py}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This will simulate the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 with the integrated IP cores. You can modify the testbench to observe signal behaviors or implement more complex test scenarios.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
5. Synthesis and Further Steps}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
Once the simulation is successful, you can proceed with synthesis and implementation using tools like }{\*\cs15\b\ab\rtlch \ltrch\loch
Yosys}{\rtlch \ltrch\loch
 for FPGA targeting or }{\*\cs15\b\ab\rtlch \ltrch\loch
Verilator}{\rtlch \ltrch\loch
 for further simulation. You will need to:}
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  1.\tab}\ilvl0\ls14 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
Convert the Amaranth design to Verilog using }{\*\cs15\b\ab\rtlch \ltrch\loch
Amaranth's}{\rtlch \ltrch\loch
 Verilog exporter. }
\par \pard\plain \s20\sb0\sa120{\listtext\pard\plain  2.\tab}\ilvl0\ls14 \li0\ri0\lin0\rin0\fi-283\tx707\li707\ri0\lin707\rin0\fi-283{\rtlch \ltrch\loch
Use Yosys, Vivado, or any other tool to synthesize and implement the design. }
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
For Verilog export:}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from amaranth import *}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
from amaranth.back import verilog}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\rtlch \ltrch\loch
}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
# Export the design to Verilog}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
soc = ArmDashCamSoC()}
\par \pard\plain \s25\sb0\sa0\hich\af7\dbch\af4\afs20\loch\f4\fs20\sb0\sa283{\*\cs18\hich\af7\dbch\af4\loch\f4\rtlch \ltrch\loch
verilog.convert(soc, ports=[soc.clk_in, soc.reset_in, soc.sys_clk, soc.sys_reset_n]).write("armdashcam_soc.v")}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
This will generate the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
 Verilog file, which can be used for synthesis or further implementation in FPGA tools.}
\par \pard\plain \s24\sb0\sa283\brdrb\brdrdb\brdrw15\brdrcf2\brsp0{\*\brdrb\brdlncol2\brdlnin1\brdlnout1\brdlndist20}\brsp0\noline\afs12\fs12{\rtlch \ltrch\loch
}
\par \pard\plain \s3\ilvl2\outlinelevel2\sb240\sa120\keepn\b\hich\af6\dbch\af8\afs28\ab\loch\f0\fs28{\*\cs15\b\ab\rtlch \ltrch\loch
6. Conclusion}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
In this guide, we demonstrated how to use }{\*\cs15\b\ab\rtlch \ltrch\loch
Amaranth}{\rtlch \ltrch\loch
 to integrate multiple IP cores, such as }{\*\cs15\b\ab\rtlch \ltrch\loch
NoC}{\rtlch \ltrch\loch
 and }{\*\cs15\b\ab\rtlch \ltrch\loch
Clock/Reset}{\rtlch \ltrch\loch
, into the }{\*\cs15\b\ab\rtlch \ltrch\loch
ArmDashCam SoC}{\rtlch \ltrch\loch
. Using Python\'92s expressive syntax with }{\*\cs15\b\ab\rtlch \ltrch\loch
Amaranth}{\rtlch \ltrch\loch
, you can efficiently design, simulate, and synthesize complex SoCs. We also covered testbench creation, simulation, and exporting the design to Verilog for further implementation.}
\par \pard\plain \s20\sb0\sa120{\rtlch \ltrch\loch
With }{\*\cs15\b\ab\rtlch \ltrch\loch
Amaranth}{\rtlch \ltrch\loch
, you can create scalable, modular, and reusable hardware designs, making it a powerful tool for hardware development.}
\par \pard\plain \s20\sb0\sa120\sb0\sa120{\rtlch \ltrch\loch
}
\par }